---
alwaysApply: true
---

# NestJS 和 TypeScript 開發規則

## 基本原則

- **語言**: 所有程式碼和文件使用英文
- **型別宣告**: 必須為每個變數和函式宣告型別（參數和返回值）
  - 避免使用 `any`
  - 建立必要的型別定義
- **文件**: 使用 JSDoc 為公開的類別和方法撰寫文件
- **檔案結構**: 每個檔案只能有一個 export

## 命名規範

- **類別**: 使用 PascalCase
- **變數、函式、方法**: 使用 camelCase
- **檔案和目錄**: 使用 kebab-case
- **環境變數**: 使用 UPPERCASE
- **函式**: 以動詞開頭
- **布林變數**: 使用動詞形式（isLoading, hasError, canDelete）
- **完整單字**: 避免縮寫，使用正確拼寫

## 函式設計

- 撰寫短小且單一用途的函式（少於 20 行）
- 使用早期檢查和提前返回避免巢狀區塊
- 使用高階函式（map, filter, reduce）
- 簡單函式使用箭頭函式（少於 3 行）
- 使用預設參數值
- 使用 RO-RO 模式減少函式參數

## 類別設計

- 遵循 SOLID 原則
- 偏好組合勝過繼承
- 宣告介面定義契約
- 撰寫小型類別（少於 200 行，少於 10 個公開方法）

## NestJS 特定規範

### 模組架構

- 使用模組化架構
- 每個主要領域一個模組
- 每個路由一個控制器
- models 資料夾包含資料型別
- services 模組包含業務邏輯和持久化

### 檔案結構

- **Controllers**: 處理 HTTP 請求
- **Services**: 業務邏輯和資料存取
- **DTOs**: 使用 class-validator 進行輸入驗證
- **Entities**: 使用 MikroORM 進行資料持久化
- **Modules**: 封裝相關功能

### 異常處理

- 使用例外處理意外錯誤
- 使用全域過濾器處理例外
- 捕獲例外時應該修復問題或添加上下文

## 程式碼品質

- 函式內不留空白行
- 避免魔術數字，定義常數
- 偏好不可變資料
- 使用 readonly 標記不變的資料
- 使用 as const 標記不變的字面量
